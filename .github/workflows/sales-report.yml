name: Weekly Sales Report
on:
  # Run on schedule (2 AM UTC every Monday)
  schedule:
    - cron: '0 2 * * 1'
  # Allow manual triggering via GitHub UI
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'true'
        type: boolean

jobs:
  generate-sales-report:
    runs-on: ubuntu-latest
    env:
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
      TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
      AE_EMAILS_CHARMAINE: ${{ secrets.AE_EMAILS_CHARMAINE }}
      AE_EMAILS_WORLDLINK: ${{ secrets.AE_EMAILS_WORLDLINK }}
      AE_EMAILS_HOUSE: ${{ secrets.AE_EMAILS_HOUSE }}
      AE_EMAILS_NATIONAL: ${{ secrets.AE_EMAILS_NATIONAL }}
      DROPBOX_TEAM_MEMBER_ID: ${{ secrets.DROPBOX_TEAM_MEMBER_ID }}
      USE_REPO_TEMPLATES: "true"
   
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
     
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
     
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
     
      - name: Refresh Dropbox Access Token
        id: refresh_dropbox_token
        run: |
          # Base64 encode your Dropbox app key and secret
          auth=$(echo -n "${{ secrets.DROPBOX_APP_KEY }}:${{ secrets.DROPBOX_APP_SECRET }}" | base64)
          
          # Call Dropbox token endpoint to refresh the token
          response=$(curl -s -X POST "https://api.dropboxapi.com/oauth2/token" \
            -H "Authorization: Basic $auth" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "grant_type=refresh_token" \
            --data-urlencode "refresh_token=${{ secrets.DROPBOX_REFRESH_TOKEN }}")
          
          # Check if the response contains an access token
          if [[ $(echo "$response" | jq -r '.access_token') == "null" ]]; then
            echo "Error: Failed to refresh Dropbox token."
            echo "Response: $response"
            exit 1
          fi
          
          # Extract and mask the token
          new_token=$(echo "$response" | jq -r '.access_token')
          echo "::add-mask::$new_token"
          echo "Successfully refreshed Dropbox access token"
          
          # Export new token to environment for subsequent steps
          echo "DROPBOX_ACCESS_TOKEN=$new_token" >> $GITHUB_ENV
     
      - name: Download files from Dropbox
        run: python scripts/team_dropbox_download.py
        # Add error handling for the download step
        continue-on-error: false
     
      - name: Override config for CI
        run: |
          jq '.root_path = .ci_root_path | .reports_folder = .ci_reports_folder | .vba_path = .ci_vba_path' config.json > tmp.json
          mv tmp.json config.json  
     
      - name: Run sales report generator
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.test_mode }}" == "true" ]]; then
            python main.py --test
          else
            python main.py
          fi